ext.COMPONENTS = ['jdroid-android', 'jdroid-java-okhttp']
apply plugin: 'com.jdroid.android.application'

description = 'Jdroid Sample Android'

jdroid {
	notDefaultLanguages = ['es']
}

repositories {
	jcenter()
	maven {
		url 'https://maven.fabric.io/public'
	}

}

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
	uatCompile
}

buildscript {
	dependencies {
		classpath 'com.jdroidframework:jdroid-gradle-android-plugin:' + jdroidPluginsVersion
	}
}

dependencies {

	compile 'com.android.support:multidex:1.0.1'

	debugCompile project(path: ":jdroid-android", configuration: 'debug')
	uatCompile project(path: ":jdroid-android", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android", configuration: 'release')
	}

	debugCompile project(path: ":jdroid-android-about", configuration: 'debug')
	uatCompile project(path: ":jdroid-android-about", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-about", configuration: 'release')
	}

	debugCompile project(path: ":jdroid-android-crashlytics", configuration: 'debug')
	uatCompile project(path: ":jdroid-android-crashlytics", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-crashlytics", configuration: 'release')
	}

	debugCompile project(path: ":jdroid-android-facebook", configuration: 'debug')
	uatCompile project(path: ":jdroid-android-facebook", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-facebook", configuration: 'release')
	}

	debugCompile project(path: ':jdroid-android-firebase-admob', configuration: 'debug')
	uatCompile project(path: ':jdroid-android-firebase-admob', configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-firebase-admob", configuration: 'release')
	}

	debugCompile project(path: ":jdroid-android-google-maps", configuration: 'debug')
	uatCompile project(path: ":jdroid-android-google-maps", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-google-maps", configuration: 'release')
	}

	debugCompile project(path: ':jdroid-android-firebase-database', configuration: 'debug')
	uatCompile project(path: ':jdroid-android-firebase-database', configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ':jdroid-android-firebase-database', configuration: 'release')
	}

	debugCompile project(path: ':jdroid-android-firebase-fcm', configuration: 'debug')
	uatCompile project(path: ':jdroid-android-firebase-fcm', configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ':jdroid-android-firebase-fcm', configuration: 'release')
	}

	debugCompile project(path: ':jdroid-android-firebase-remoteconfig', configuration: 'debug')
	uatCompile project(path: ':jdroid-android-firebase-remoteconfig', configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ':jdroid-android-firebase-remoteconfig', configuration: 'release')
	}

	debugCompile project(path: ":jdroid-android-google-signin", configuration: 'debug')
	uatCompile project(path: ":jdroid-android-google-signin", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-google-signin", configuration: 'release')
	}

	debugCompile project(path: ":jdroid-android-twitter", configuration: 'debug')
	uatCompile project(path: ":jdroid-android-twitter", configuration: 'debug')
	if (jdroid.isReleaseBuildTypeEnabled()) {
		releaseCompile project(path: ":jdroid-android-twitter", configuration: 'release')
	}

	compile 'com.firebase:firebase-client-android:2.5.0'

	compile(project(':jdroid-java-firebase-database')) {
		exclude module: 'slf4j-api'
		exclude group:'com.firebase', module: 'firebase-client-jvm'
	}

	compile(project(':jdroid-java-http-okhttp')) {
		exclude module: 'slf4j-api'
	}

	testCompile 'junit:junit:4.12'
	testCompile "org.mockito:mockito-core:1.9.5"

	// https://github.com/robolectric/robolectric
	testCompile 'org.robolectric:robolectric:3.1'
}


android {

	defaultConfig {

		applicationId 'com.jdroid.android.sample'

		applicationVariants.all { variant ->

			variant.outputs.each { output ->
				def outputFile = output.outputFile
				if (outputFile != null && outputFile.name.endsWith('.apk')) {
					def fileName = outputFile.name.replace('.apk', "-v${versionName}.apk")
					output.outputFile = new File(outputFile.parent, fileName)
				}
			}
		}

		jdroid.setBuildConfigBoolean(defaultConfig, "STRICT_MODE_ENABLED", false)
		jdroid.setBuildConfigBoolean(defaultConfig, "FIREBASE_ANALYTICS_ENABLED", true)

		jdroid.setBuildConfigBoolean(defaultConfig, "GOOGLE_ANALYTICS_ENABLED", true)
		jdroid.setBuildConfigString(defaultConfig, "GOOGLE_ANALYTICS_TRACKING_ID", "UA-84573310-1")

		jdroid.setBuildConfigString(defaultConfig, "GOOGLE_SERVER_CLIENT_ID", "852072465140-ksbqqoidt2jl2nqqvffnc6ic07fqb6g8.apps.googleusercontent.com")

		jdroid.setBuildConfigBoolean(defaultConfig, "CRASHLYTICS_ENABLED", true)

		jdroid.setBuildConfigString(defaultConfig, "LOCAL_IP")

		jdroid.setBuildConfigString(defaultConfig, "INSTALLATION_SOURCE", "GooglePlay")

		jdroid.setBuildConfigBoolean(defaultConfig, "ADS_ENABLED", true)
		jdroid.setBuildConfigString(defaultConfig, "ADMOB_APP_ID", "ca-app-pub-4654922738884963~4242524943")
		jdroid.setBuildConfigString(defaultConfig, "DEFAULT_AD_UNIT_ID", "ca-app-pub-4654922738884963/8672724544")

		jdroid.setBuildConfigString(defaultConfig, "GOOGLE_PLAY_PUBLIC_KEY")

		jdroid.setBuildConfigString(defaultConfig, "FIREBASE_URL")
		jdroid.setBuildConfigString(defaultConfig, "FIREBASE_AUTH_TOKEN")

		jdroid.setBuildConfigString(defaultConfig, "TWITTER_OAUTH_CONSUMER_KEY")
		jdroid.setBuildConfigString(defaultConfig, "TWITTER_OAUTH_CONSUMER_SECRET")

		jdroid.setBuildConfigString(defaultConfig, "FIREBASE_DYNAMIC_LINKS_DOMAIN", "euv8z.app.goo.gl")
		jdroid.setBuildConfigString(defaultConfig, "FIREBASE_WEB_API_KEY", "AIzaSyCcwMZ25CMtubXhcW3I7NVTybckPu0Dwtg")

		// Used by Google Sign In. {YOUR_CLIENT}/oauth_client/client_id (client_type == 3)
		jdroid.setResValueString(defaultConfig, "default_web_client_id", "527857945512-qr7kk98nntlt44po5cblnrgq41ief65s.apps.googleusercontent.com")

		// Used by Firebase Database. project_info/firebase_url
		jdroid.setResValueString(defaultConfig, "firebase_database_url", "https://jdroid-staging.firebaseio.com")

		// project_info/project_number
		jdroid.setResValueString(defaultConfig, "gcm_defaultSenderId", "527857945512")

		// {YOUR_CLIENT}/api_key/current_key
		jdroid.setResValueString(defaultConfig, "google_api_key", "AIzaSyDNAyitlL4PWxNCjf63Quf0ruvcFSzs6D0")

		// {YOUR_CLIENT}/client_info/mobilesdk_app_id
		jdroid.setResValueString(defaultConfig, "google_app_id", "1:527857945512:android:04da523460c0b69f")

		// Used by Firebase Crash. {YOUR_CLIENT}/api_key/current_key
		jdroid.setResValueString(defaultConfig, "google_crash_reporting_api_key", "AIzaSyDNAyitlL4PWxNCjf63Quf0ruvcFSzs6D0")

		// project_info/storage_bucket
		jdroid.setResValueString(defaultConfig, "google_storage_bucket", "jdroid-staging.appspot.com")

		manifestPlaceholders = [
				googleMapsApiKey: "AIzaSyA2UZNjUMaw7kFk9qvHeGLTppXxcgI3l1Y",
				fabricApiKey: "478dae49374362f33bc054fc44d1f4242c574ccb",
				facebookAppId: "fb1048902711862195"
		]

		multiDexEnabled true
	}


	buildTypes {

		debug {
			signingConfig signingConfigs.debug

			applicationIdSuffix ".debug"

			jdroid.setBuildConfigBoolean(buildTypes.debug, "CRASHLYTICS_ENABLED", false)
			jdroid.setBuildConfigString(buildTypes.debug, "SERVER_NAME", "DEV")
		}

		uat {
			signingConfig signingConfigs.debug

			applicationIdSuffix ".debug"

			debuggable true

			jdroid.setBuildConfigString(buildTypes.uat, "SERVER_NAME", "UAT")

		}

		if (jdroid.isReleaseBuildTypeEnabled()) {
			release {

				signingConfig signingConfigs.release

				jdroid.setBuildConfigString(buildTypes.release, "SERVER_NAME", "PROD")

				// TODO Add GOOGLE_PLAY_PUBLIC_KEY
				// TODO Add GOOGLE_ANALYTICS_TRACKING_ID
				// TODO Add FIREBASE_AUTH_TOKEN
				// TODO Add GOOGLE_SERVER_CLIENT_ID

				// Used by Google Sign In. {YOUR_CLIENT}/oauth_client/client_id (client_type == 3)
				jdroid.setResValueString(defaultConfig, "default_web_client_id", "361779001695-1h1mk78pnrvlfvti8mfpcs7hbgrpcddu.apps.googleusercontent.com")

				// Used by Firebase Database. project_info/firebase_url
				jdroid.setResValueString(defaultConfig, "firebase_database_url", "https://fir-jdroid-production.firebaseio.com")

				// project_info/project_number
				jdroid.setResValueString(defaultConfig, "gcm_defaultSenderId", "361779001695")

				// {YOUR_CLIENT}/api_key/current_key
				jdroid.setResValueString(defaultConfig, "google_api_key", "AIzaSyDe-x-lkKP2VyeMYq8i0I5mbeDAElY6Pks")

				// {YOUR_CLIENT}/client_info/mobilesdk_app_id
				jdroid.setResValueString(defaultConfig, "google_app_id", "1:361779001695:android:85398d20b5634ada")

				// Used by Firebase Crash. {YOUR_CLIENT}/api_key/current_key
				jdroid.setResValueString(defaultConfig, "google_crash_reporting_api_key", "AIzaSyDe-x-lkKP2VyeMYq8i0I5mbeDAElY6Pks")

				// project_info/storage_bucket
				jdroid.setResValueString(defaultConfig, "google_storage_bucket", "fir-jdroid-production.appspot.com")

				manifestPlaceholders = [
						googleMapsApiKey: jdroid.getProp("GOOGLE_MAPS_API_KEY", ""),
						fabricApiKey: jdroid.getProp("FABRIC_API_KEY", ""),
						facebookAppId: jdroid.getProp("FACEBOOK_APP_ID", "")
				]
			}
		}
	}

	sourceSets.uat {
		java.srcDirs = ['src/debug/java', 'src/uat/java']
		resources.srcDirs = ['src/debug/resources', 'src/uat/resources']
		res.srcDirs = ['src/debug/res', 'src/uat/res']
	}

	sourceSets.test.java.srcDirs += "build/generated/source/r/debug"
	sourceSets.test.java.srcDirs += sourceSets.main.java.srcDirs
	sourceSets.test.java.srcDirs += sourceSets.debug.java.srcDirs
	sourceSets.test.resources.srcDirs += sourceSets.main.resources.srcDirs
	sourceSets.test.resources.srcDirs += sourceSets.debug.resources.srcDirs
	sourceSets.test.res.srcDirs += sourceSets.main.res.srcDirs
	sourceSets.test.res.srcDirs += sourceSets.debug.res.srcDirs
}
