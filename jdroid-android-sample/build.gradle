apply plugin: 'com.jdroid.android.application'

description = 'Jdroid Sample Android'
ext.packaging = 'apk'

jdroid {
	notDefaultLanguages = ['es']
}

repositories {
	mavenCentral()
	maven {
		url 'https://maven.fabric.io/public'
	}

}

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath 'com.jdroidframework:jdroid-gradle-plugin:' + jdroidVersion
	}
}

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
	uatCompile
}


dependencies {

	compile 'com.android.support:multidex:1.0.1'

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android:' + jdroidVersion
	compile project(':jdroid-android')

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android-about:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android-about:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android-about:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android-about", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android-about", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android-about", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android-about:' + jdroidVersion
	compile project(':jdroid-android-about')

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android-crashlytics:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android-crashlytics:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android-crashlytics:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android-crashlytics", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android-crashlytics", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android-crashlytics", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android-crashlytics:' + jdroidVersion
	compile project(':jdroid-android-crashlytics')

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android-facebook:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android-facebook:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android-facebook:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android-facebook", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android-facebook", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android-facebook", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android-facebook:' + jdroidVersion
	compile project(':jdroid-android-facebook')

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android-google-admob:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android-google-admob:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android-google-admob:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android-google-admob", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android-google-admob", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android-google-admob", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android-google-admob:' + jdroidVersion
	compile project(':jdroid-android-google-admob')

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android-google-maps:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android-google-maps:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android-google-maps:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android-google-maps", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android-google-maps", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android-google-maps", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android-google-maps:' + jdroidVersion
	compile project(':jdroid-android-google-maps')

	// TODO Enable this when we discover how to publish both debug and release libraries
//	debugCompile 'com.jdroidframework:jdroid-android-google-gcm:' + jdroidVersion + ':debug@aar'
//	uatCompile 'com.jdroidframework:jdroid-android-google-gcm:' + jdroidVersion + ':debug@aar'
//	releaseCompile 'com.jdroidframework:jdroid-android-google-gcm:' + jdroidVersion + ':release@aar'
//	debugCompile project(path: ":jdroid-android-google-gcm", configuration: 'debug')
//	uatCompile project(path: ":jdroid-android-google-gcm", configuration: 'debug')
//	releaseCompile project(path: ":jdroid-android-google-gcm", configuration: 'release')

	//compile 'com.jdroidframework:jdroid-android-google-gcm:' + jdroidVersion
	compile project(':jdroid-android-google-gcm')

	compile project(':jdroid-android-google-signin')

//	compile ('com.jdroidframework:jdroid-java-http-okhttp:' + jdroidVersion) {
//		exclude module: 'slf4j-api'
//	}

	compile 'com.firebase:firebase-client-android:2.5.0'

	compile(project(':jdroid-java-firebase')) {
		exclude module: 'slf4j-api'
		exclude group:'com.firebase', module: 'firebase-client-jvm'
	}

	compile(project(':jdroid-java-http-okhttp')) {
		exclude module: 'slf4j-api'
	}

	testCompile 'junit:junit:4.12'
	testCompile "org.mockito:mockito-core:1.9.5"
	testCompile('org.robolectric:robolectric:2.4') {
		exclude module: 'classworlds'
		exclude module: 'commons-logging'
		exclude module: 'httpclient'
		exclude module: 'maven-artifact'
		exclude module: 'maven-artifact-manager'
		exclude module: 'maven-error-diagnostics'
		exclude module: 'maven-model'
		exclude module: 'maven-project'
		exclude module: 'maven-settings'
		exclude module: 'plexus-container-default'
		exclude module: 'plexus-interpolation'
		exclude module: 'plexus-utils'
		exclude module: 'wagon-file'
		exclude module: 'wagon-http-lightweight'
		exclude module: 'wagon-provider-api'
	}
}


android {

	defaultConfig {

		applicationVariants.all { variant ->

			variant.outputs.each { output ->
				def outputFile = output.outputFile
				if (outputFile != null && outputFile.name.endsWith('.apk')) {
					def fileName = outputFile.name.replace('.apk', "-v${versionName}.apk")
					output.outputFile = new File(outputFile.parent, fileName)
				}
			}
		}

		jdroid.setBoolean(defaultConfig, "GOOGLE_ANALYTICS_ENABLED", true)
		jdroid.setString(defaultConfig, "GOOGLE_ANALYTICS_TRACKING_ID", "UA-9898638-5")
		jdroid.setBoolean(defaultConfig, "GOOGLE_ANALYTICS_DEBUG_ENABLED", true)

		jdroid.setString(defaultConfig, "GOOGLE_ANALYTICS_TRACKING_ID", "UA-9898638-5")

		jdroid.setString(defaultConfig, "GOOGLE_SERVER_CLIENT_ID", "852072465140-ksbqqoidt2jl2nqqvffnc6ic07fqb6g8.apps.googleusercontent.com")

		jdroid.setBoolean(defaultConfig, "CRASHLYTICS_ENABLED", true)

		jdroid.setString(defaultConfig, "LOCAL_IP", null)

		jdroid.setString(defaultConfig, "INSTALLATION_SOURCE", "GooglePlay")

		jdroid.setBoolean(defaultConfig, "ADS_ENABLED", true)
		jdroid.setString(defaultConfig, "AD_UNIT_ID", "ca-app-pub-4654922738884963/8672724544")
		jdroid.setString(defaultConfig, "ADS_TEST_DEVICES_IDS", null)

		jdroid.setString(defaultConfig, "GOOGLE_PLAY_PUBLIC_KEY", null)

		jdroid.setString(defaultConfig, "FIREBASE_URL", null)
		jdroid.setString(defaultConfig, "FIREBASE_AUTH_TOKEN", null)

		resValue "string", "facebook_app_id", '"967462636672870"'


		manifestPlaceholders = [
				googleMapsApiKey: "AIzaSyBiIX2Ays99BfiaAA3CcYtZ7bQ6ZOfzgog",
				fabricApiKey: "478dae49374362f33bc054fc44d1f4242c574ccb"
		]

		multiDexEnabled true
	}


	buildTypes {

		debug {
			signingConfig signingConfigs.debug

			jdroid.setBoolean(buildTypes.debug, "CRASHLYTICS_ENABLED", false)
			jdroid.setString(buildTypes.debug, "SERVER_NAME", "DEV")
		}

		uat {
			signingConfig signingConfigs.debug

			debuggable true

			jdroid.setString(buildTypes.uat, "SERVER_NAME", "UAT")

		}

		release {

			signingConfig signingConfigs.release

			jdroid.setBoolean(buildTypes.release, "GOOGLE_ANALYTICS_DEBUG_ENABLED", false)

			jdroid.setString(buildTypes.release, "SERVER_NAME", "PROD")

			// TODO Add GOOGLE_PLAY_PUBLIC_KEY
			// TODO Add GOOGLE_ANALYTICS_TRACKING_ID
			// TODO Add FIREBASE_URL
			// TODO Add FIREBASE_AUTH_TOKEN
			// TODO Add GOOGLE_SERVER_CLIENT_ID

			// TODO Add manifestPlaceholders = [googleMapsApiKey,crashlyticsApiKey

		}
	}

	sourceSets.uat {
		java.srcDirs = ['src/debug/java', 'src/uat/java']
		resources.srcDirs = ['src/debug/resources', 'src/uat/resources']
		res.srcDirs = ['src/debug/res', 'src/uat/res']
	}

	sourceSets.test.java.srcDirs += "build/generated/source/r/debug"
	sourceSets.test.java.srcDirs += sourceSets.main.java.srcDirs
	sourceSets.test.java.srcDirs += sourceSets.debug.java.srcDirs
	sourceSets.test.resources.srcDirs += sourceSets.main.resources.srcDirs
	sourceSets.test.resources.srcDirs += sourceSets.debug.resources.srcDirs
	sourceSets.test.res.srcDirs += sourceSets.main.res.srcDirs
	sourceSets.test.res.srcDirs += sourceSets.debug.res.srcDirs
}
